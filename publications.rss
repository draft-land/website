<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>ZX-calculus publications</title><link>http://zxcalculus.com/publications.rss</link><description>An up to date list of the newest publications related to the ZX-calculus</description><language>en-US</language><lastBuildDate>Thu, 25 Mar 2021 15:02:49 GMT</lastBuildDate><generator>rfeed v1.0.0</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>[Video] String Diagrams for the Surface Code &amp;#127909;</title><link>https://www.youtube.com/watch?v=OYDpEo8yP40</link><description>We briefly review modular tensor categories, a formalism for modelling anyonic theories. By considering the modular tensor category for the toric code and a functor to FdHilb, we give the semantics of surface code string diagrams in terms of circuits and the ZX-calculus. We use these tools to compile circuits to the surface code.</description><author>Alex Cowtan</author><pubDate>Thu, 18 Mar 2021 00:00:00 GMT</pubDate><guid isPermaLink="true">https://www.youtube.com/watch?v=OYDpEo8yP40</guid></item><item><title>Diagrammatic Differentiation for Quantum Machine Learning</title><link>http://arxiv.org/abs/2103.07960</link><description>We introduce diagrammatic differentiation for tensor calculus by generalising the dual number construction from rigs to monoidal categories. Applying this to ZX diagrams, we show how to calculate diagrammatically the gradient of a linear map with respect to a phase parameter. For diagrams of parametrised quantum circuits, we get the well-known parameter-shift rule at the basis of many variational quantum algorithms. We then extend our method to the automatic differentation of hybrid classical-quantum circuits, using diagrams with bubbles to encode arbitrary non-linear operators. Moreover, diagrammatic differentiation comes with an open-source implementation in DisCoPy, the Python library for monoidal categories. Diagrammatic gradients of classical-quantum circuits can then be simplified using the PyZX library and executed on quantum hardware via the tket compiler. This opens the door to many practical applications harnessing both the structure of string diagrams and the computational power of quantum machine learning.</description><author>Alexis Toumi, Richie Yeung and Giovanni de Felice</author><pubDate>Sun, 14 Mar 2021 00:00:00 GMT</pubDate><guid isPermaLink="true">http://arxiv.org/abs/2103.07960</guid></item><item><title>Completeness of the ZH-calculus</title><link>http://arxiv.org/abs/2103.06610</link><description>There are various gate sets used for describing quantum computation. A particularly popular one consists of Clifford gates and arbitrary single-qubit phase gates. Computations in this gate set can be elegantly described by the ZX-calculus, a graphical language for a class of string diagrams describing linear maps between qubits. The ZX-calculus has proven useful in a variety of areas of quantum information, but is less suitable for reasoning about operations outside its natural gate set such as multi-linear Boolean operations like the Toffoli gate. In this paper we study the ZH-calculus, an alternative graphical language of string diagrams that does allow straightforward encoding of Toffoli gates and other more complicated Boolean logic circuits. We find a set of simple rewrite rules for this calculus and show it is complete with respect to matrices over $ℤ[\frac12]$, which correspond to the approximately universal Toffoli+Hadamard gateset. Furthermore, we construct an extended version of the ZH-calculus that is complete with respect to matrices over any ring $R$ where $1+1$ is not a zero-divisor.</description><author>Miriam Backens, Aleks Kissinger, Hector Miller-Bakewell, John van de Wetering and Sal Wolffs</author><pubDate>Thu, 11 Mar 2021 00:00:00 GMT</pubDate><guid isPermaLink="true">http://arxiv.org/abs/2103.06610</guid></item><item><title>Classifying Complexity with the ZX-Calculus: Jones Polynomials and Potts Partition Functions</title><link>http://arxiv.org/abs/2103.06914</link><description>The ZX-calculus is a graphical language which allows for reasoning about suitably represented tensor networks - namely ZX-diagrams - in terms of rewrite rules. Here, we focus on problems which amount to exactly computing a scalar encoded as a closed tensor network. In general, such problems are #P-hard. However, there are families of such problems which are known to be in P when the dimension is below a certain value. By expressing problem instances from these families as ZX-diagrams, we see that the easy instances belong to the stabilizer fragment of the ZX-calculus. Building on previous work on efficient simplification of qubit stabilizer diagrams, we present simplifying rewrites for the case of qutrits, which are of independent interest in the field of quantum circuit optimisation. Finally, we look at the specific examples of evaluating the Jones polynomial and of counting graph-colourings. Our exposition further champions the ZX-calculus as a suitable and unifying language for studying the complexity of a broad range of classical and quantum problems.</description><author>Alex Townsend-Teague and Konstantinos Meichanetzidis</author><pubDate>Thu, 11 Mar 2021 00:00:00 GMT</pubDate><guid isPermaLink="true">http://arxiv.org/abs/2103.06914</guid></item><item><title>Quantum and braided ZX calculus</title><link>http://arxiv.org/abs/2103.07264</link><description>We revisit the notion of interacting Frobenius Hopf algebras for ZX-calculus in quantum computing, with focus on allowing the algebras to be noncommutative and coalgebras to be noncocommutative. We introduce the notion of *-structures in ZX-calculus at this algebraic level and construct examples based on the quantum group u_q(sl_2) at a root of unity. We provide an abstract formulation of the Hadamard gate at this level and clarify its relationship to Hopf algebra self-duality. We then solve the problem of extending the notion of interacting Hopf algebras and ZX-calculus to take place in a braided tensor category. In the ribbon case, the Hadamard gate coming from braided self-duality obeys a modular identity. We give the example of b_q(sl_2), the self-dual braided version of u_q(sl_2).</description><author>Shahn Majid</author><pubDate>Thu, 11 Mar 2021 00:00:00 GMT</pubDate><guid isPermaLink="true">http://arxiv.org/abs/2103.07264</guid></item><item><title>[Video] ZXCalculus.jl - A Julia package for ZX Calculus for Yao.jl &amp;#127909;</title><link>https://www.youtube.com/watch?v=LnzEf0pWQcs</link><description>ZXCalculus.jl is a Google Summer of Code (GSoC) 2020 project developed this summer to enable Yao's newly developed compiler to be able to simplify quantum circuits using ZX calculus. It is highly inspired by the python project pyzx, and with some custom tweaks. In this talk, we will briefly introduce the Yao's ecosystem in the Julia programming language and give people a tutorial on how to use this ZXCalculus package.</description><author>Zhao Chen</author><pubDate>Tue, 10 Mar 2020 00:00:00 GMT</pubDate><guid isPermaLink="true">https://www.youtube.com/watch?v=LnzEf0pWQcs</guid></item><item><title>[Video] Sparsifying ZX-diagrams for CNOT count &amp;#127909;</title><link>https://www.youtube.com/watch?v=twtCQ-XF9f8</link><description>Reducing ZX-diagrams using the technique from "Graph-theoretic simplification" (arXiv:1902.03178) does not result in unique normal forms, but rather one of many equivalent diagrams modulo local complementation and pivoting. The particular choice of normal form can then have a big effect on the CNOT count of the resulting diagram. In this talk, I will show some preliminary efforts to explore this space and use simulated annealing to get the CNOT count down.</description><author>Aleks Kissinger</author><pubDate>Tue, 10 Mar 2020 00:00:00 GMT</pubDate><guid isPermaLink="true">https://www.youtube.com/watch?v=twtCQ-XF9f8</guid></item><item><title>[Video] Mixed quantum-classical circuit optimization using grounds &amp;#127909;</title><link>https://www.youtube.com/watch?v=-Frd8w-hTD0</link><description>In this talk I show an extension to "Graph-theoretic simplification using ZX" (arXiv:1902.03178) to support mixed circuits with measurement and classical wires, using the ZX-ground calculus. I will present new gFlow-preserving rewrite rules that can be used with the ground generators, the extended optimization algorithm, and the extraction particularities that produce circuits with classical controls.</description><author>Agustín Borgna</author><pubDate>Tue, 10 Mar 2020 00:00:00 GMT</pubDate><guid isPermaLink="true">https://www.youtube.com/watch?v=-Frd8w-hTD0</guid></item><item><title>[Video] Measurement-based quantum computing (MBQC) in the ZX-calculus &amp;#127909;</title><link>https://www.youtube.com/watch?v=0KYkTWdvNmo</link><description></description><author>Miriam Backens</author><pubDate>Tue, 25 Feb 2020 00:00:00 GMT</pubDate><guid isPermaLink="true">https://www.youtube.com/watch?v=0KYkTWdvNmo</guid></item><item><title>Kindergarden quantum mechanics graduates (...or how I learned to stop gluing LEGO together and love the ZX-calculus)</title><link>http://arxiv.org/abs/2102.10984</link><description>This paper is a `spiritual child' of the 2005 lecture notes Kindergarten Quantum Mechanics, which showed how a simple, pictorial extension of Dirac notation allowed several quantum features to be easily expressed and derived, using language even a kindergartner can understand. Central to that approach was the use of pictures and pictorial transformation rules to understand and derive features of quantum theory and computation. However, this approach left many wondering `where's the beef?' In other words, was this new approach capable of producing new results, or was it simply an aesthetically pleasing way to restate stuff we already know?   The aim of this sequel paper is to say `here's the beef!', and highlight some of the major results of the approach advocated in Kindergarten Quantum Mechanics, and how they are being applied to tackle practical problems on real quantum computers. We will focus mainly on what has become the Swiss army knife of the pictorial formalism: the ZX-calculus. First we look at some of the ideas behind the ZX-calculus, comparing and contrasting it with the usual quantum circuit formalism. We then survey results from the past 2 years falling into three categories: (1) completeness of the rules of the ZX-calculus, (2) state-of-the-art quantum circuit optimisation results in commercial and open-source quantum compilers relying on ZX, and (3) the use of ZX in translating real-world stuff like natural language into quantum circuits that can be run on today's (very limited) quantum hardware.   We also take the title literally, and outline an ongoing experiment aiming to show that ZX-calculus enables children to do cutting-edge quantum computing stuff. If anything, this would truly confirm that `kindergarten quantum mechanics' wasn't just a joke.</description><author>Bob Coecke, Dominic Horsman, Aleks Kissinger and Quanlong Wang</author><pubDate>Mon, 22 Feb 2021 00:00:00 GMT</pubDate><guid isPermaLink="true">http://arxiv.org/abs/2102.10984</guid></item></channel></rss>